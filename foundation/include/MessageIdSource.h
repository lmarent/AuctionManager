
/*! \file   MessageIdSource.h

    Copyright 2014-2015 Universidad de los Andes, Bogot√°, Colombia

    This file is part of Network Auction Manager System (NETAUM).

    NETAUM is free software; you can redistribute it and/or modify 
    it under the terms of the GNU General Public License as published by 
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    NETAUM is distributed in the hope that it will be useful, 
    but WITHOUT ANY WARRANTY; without even the implied warranty of 
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this software; if not, write to the Free Software 
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    Description:
    manage unique numeric for Message ids within a session space

    $Id: MessageIdSource.h 748 2015-10-29 11:09:00Z amarentes $
*/

#ifndef _MESSAGE_ID_SOURCE_H_
#define _MESSAGE_ID_SOURCE_H_


#include "stdincpp.h"
#include "Error.h"
#include "Logger.h"

namespace auction
{


/*! \short   generate unique id numbers
  
    The MessageIdSource class can generate unique 32 bit integer numbers for
    use by other functions. A single number can be lent from the pool of
    available numbers, and this number will not be generated by a call to 
    the newId function until it has been previously released with a call
    to the freeId function.
*/

class MessageIdSource
{
  private:

    uint32_t num;
    
  public:

    //! construct and initialize a MessageIdSource object
    //! we wrap around 2^32
						       
    MessageIdSource();

    //! destroy a MessageIdSource object
    ~MessageIdSource();

	void setNewId(uint32_t val) {num = val;}

    /*! \short   generate a new internal id number

        return a new Id value that is currently not in use. This value will be
        marked as used and will not returned by a call to newId unless it has
        been released again with a call to freeId
        \returns unique unused id value
    */
    uint32_t newId( void );

    //! dump a MessageIdSource object
    void dump( ostream &os );



};


//! overload for <<, so that a MessageIdSource object can be thrown into an iostream
ostream& operator<< ( ostream &os, MessageIdSource &mis );

}; // namespace auction

#endif // _MESSAGE_ID_SOURCE_H_
